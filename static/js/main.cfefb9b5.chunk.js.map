{"version":3,"sources":["i18n.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["i18n","use","initReactI18next","init","resources","en","translation","al","lng","keySeparator","interpolation","escapeValue","App","useTranslation","t","useState","lang","setLang","changeLanguage","event","target","dataset","schema","yup","shape","email","required","password","min","max","className","data-lang","onClick","initialValues","validationSchema","validate","errors","test","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","Form","Group","controlId","Label","Control","type","name","placeholder","onChange","onBlur","value","isInvalid","Feedback","aria-describedby","Text","id","Button","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfefb9b5.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\n// the translations\r\n// (tip move them in a JSON file and import them)\r\nconst resources = {\r\n  en: {\r\n    translation: {\r\n      \"Welcome to React\": \"Welcome to React and react-i18next\",\r\n      \"password-requirements\":\"The password must have a minimum of eight characters, at least one letter, one number and one special character\",\r\n      \"email-label\":\"Email address\",\r\n      \"password-label\":\"Password\",\r\n      \"submit\":\"Submit\"\r\n    }\r\n  },\r\n  al: {\r\n    translation: {\r\n      \"Welcome to React\": \"Miresevini ne React dhe react-i18next\",\r\n      \"password-requirements\":\"Fjalekalimi duhet te kete nje minimum prej tete karakteresh,te pakten nje shkronje, nje numer dhe nje karakter special\",\r\n      \"email-label\":\"Adresa e Emailit\",\r\n      \"password-label\":\"Fjalekalimi\",\r\n      \"submit\":\"Dergo\"\r\n    }\r\n  }\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    }\r\n  });\r\n\r\n  export default i18n;","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport * as yup from 'yup';\nimport './App.css';\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n  const [lang, setLang] = useState('en')\n  interface User {\n    email: string;\n    password: string;\n  }\n  const changeLanguage = (event: any) => {\n    const lang = event.target.dataset.lang;\n    setLang(lang);\n    i18n.changeLanguage(lang)\n  }\n  const user: User = {\n    email: '',\n    password: '',\n  };\n  const schema = yup.object().shape({\n    email: yup.string().email('Invalid email').required('Required'),\n    password: yup.string().required().min(8).max(128),\n    // firstName: yup.string().required(),\n    // lastName: yup.string().required(),\n    // username: yup.string().required(),\n    // city: yup.string().required(),\n    // state: yup.string().required(),\n    // zip: yup.string().required(),\n    // terms: yup.bool().required(),\n  });\n  return (\n    <div className=\"d-flex justify-content-left align-items-center flex-column\">\n\n      <h1 className=\"pb-5\">{t('Welcome to React')}!</h1>\n      <ul className=\"langSelection\">\n        <li className={lang === 'en' ? \"active\" : \"\"} data-lang=\"en\" onClick={changeLanguage}>En</li>\n        <li className={lang === 'al' ? \"active\" : \"\"} data-lang=\"al\" onClick={changeLanguage}>Al</li>\n      </ul>\n\n      <Formik\n        initialValues={{ ...user }}\n        validationSchema={schema}\n        // values will hold all the form fields values\n        validate={({ email, password }) => {\n          const errors: any = {};\n          if (!email) {\n            errors.email = 'Email is required';\n          } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)\n          ) {\n            errors.email = 'Invalid email address';\n          }\n          if (!password) {\n            errors.password = 'Password is required'\n          } else if (!/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/.test(password)) {\n            errors.password = 'The password does not meet the minimun requirements'\n          }\n          return errors;\n        }}\n\n        onSubmit={(values, { setSubmitting, ...rest }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 1000);\n        }}\n      >\n\n        {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isValid, isSubmitting, ...otherGoodies }) => (\n\n          <form onSubmit={handleSubmit} className='col-md-6'>\n\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>{t('email-label')}</Form.Label>\n              <Form.Control type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                isValid={touched.email && !errors.email}\n                isInvalid={!!errors.email}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.email}\n              </Form.Control.Feedback>\n\n\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>{t('password-label')}</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                aria-describedby=\"passwordHelpBlock\"\n                isValid={touched.password && !errors.password}\n                isInvalid={!!errors.password}\n              />\n              <Form.Text id=\"passwordHelpBlock\" className=\"text-muted\">\n                {t('password-requirements')}\n              </Form.Text>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password && touched.password && errors.password}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {t('submit')}\n            </Button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}